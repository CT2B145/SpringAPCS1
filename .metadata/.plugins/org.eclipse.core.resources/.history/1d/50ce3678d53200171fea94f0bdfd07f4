package textExcel;

public class FormulaCell extends RealCell{
	private String formanswer;
	//private String[] fractionEquationHolder;
	private Spreadsheet sprdsheet;	//saves array from spreadsheet to access information
	// Constructor for the FormulaCell class
	public FormulaCell (String enteredForm, Spreadsheet emptycell){
		super(enteredForm);							//constructor to fill super's String field (accesses by fullCellText)
		this.formanswer = enteredForm;		
		sprdsheet = emptycell;
	}
	@Override
	public double getDoubleValue() {
		return Double.parseDouble(this.formanswer.substring(0, this.formanswer.length()-1))/100;

	}
	
	public double sum(String range) {
		String[] cellSep = range.split("-");
		double sum = 0;
		char colStart = cellSep[0].charAt(0);
		char colEnd = cellSep[1].charAt(0);
		int rowStart = Integer.parseInt(cellSep[0].substring(1));
		int rowEnd = Integer.parseInt(cellSep[1].substring(1));
		for (char i = colStart; i < colEnd; i++) {
			for (int j = rowStart; j < rowEnd; j++) {
				SpreadsheetLocation gridLoc = new SpreadsheetLocation(i + j + "");
				sum += ((RealCell) sprdsheet.getCell(gridLoc)).getDoubleValue();
			}
		}
		return sum;
	}
	
	public double avg(String range) {
		String[] cellSep = range.split("-");
		int count = 0;
		double sum = 0;
		char colStart = cellSep[0].charAt(0);
		char colEnd = cellSep[1].charAt(0);
		int rowStart = Integer.parseInt(cellSep[0].substring(1));
		int rowEnd = Integer.parseInt(cellSep[1].substring(1));
		for (char i = colStart; i < colEnd; i++) {
			for (int j = rowStart; j < rowEnd; j++) {
				SpreadsheetLocation gridLoc = new SpreadsheetLocation(i + j + "");
				sum += ((RealCell) sprdsheet.getCell(gridLoc)).getDoubleValue();
				count++;
			}
		}
		return sum / count;
	}

	@Override
public String abbreviatedCellText() {

		String removepart = this.formanswer.substring(2,this.formanswer.length()-2);
		 String[] fracEquationHolder = removepart.split(" ",removepart.length()); // holds the fractions and operator
		double answer ;
		if (removepart.indexOf("( SUM")>= 0){
			return sum(fracEquationHolder[1])+"";
		} else if (removepart.indexOf("( AVG")>= 0) {
			return avg(fracEquationHolder[1])+"";
		}
		if (fracEquationHolder[0].length() < 4 && fracEquationHolder[0].substring(0,1).matches("[a-zA-Z]+")) {
			SpreadsheetLocation gridLoc = new SpreadsheetLocation(fracEquationHolder[0]);
			answer  = ((RealCell) sprdsheet.getCell(gridLoc)).getDoubleValue();
		} else {
			answer  = Double.parseDouble(fracEquationHolder[0]);
		}
		for (int i = 2; i < fracEquationHolder.length; i+=2) {
			if (fracEquationHolder[i].length() < 4 && fracEquationHolder[i].substring(0,1).matches("[a-zA-Z]+")) {
				SpreadsheetLocation gridLoc = new SpreadsheetLocation(fracEquationHolder[i]);
				if (fracEquationHolder[i - 1].equals("+")) {
					answer  += ((RealCell) sprdsheet.getCell(gridLoc)).getDoubleValue();
				} else if (fracEquationHolder[i - 1].equals("-")) {
					answer  -= ((RealCell) sprdsheet.getCell(gridLoc)).getDoubleValue();
				} else if (fracEquationHolder[i - 1].equals("/")) {
					answer  /= ((RealCell) sprdsheet.getCell(gridLoc)).getDoubleValue();
				} else if (fracEquationHolder[i - 1].equals("*")) {
					answer  *= ((RealCell) sprdsheet.getCell(gridLoc)).getDoubleValue();
				} else {
					throw new IllegalArgumentException("Please enter a valid operator");
				}
			} else {
				if (fracEquationHolder[i - 1].equals("+")) {
					answer  += Double.parseDouble(fracEquationHolder[i]);
				} else if (fracEquationHolder[i - 1].equals("-")) {
					answer  -= Double.parseDouble(fracEquationHolder[i]);
				} else if (fracEquationHolder[i - 1].equals("/")) {
					answer  /= Double.parseDouble(fracEquationHolder[i]);
				} else if (fracEquationHolder[i - 1].equals("*")) {
					answer  *= Double.parseDouble(fracEquationHolder[i]);
				} else {
					throw new IllegalArgumentException("Please enter a valid operator");
				}
			}
		}
		String answer1 = answer  +"";
        int cellValueLength = answer1.length();
		if (cellValueLength < 10){
			while (answer1.length() < 10){
				answer1 += " ";
			}
			return answer1;
		} else if (cellValueLength > 10){
			answer1 = answer1.substring(0, 10);
			return answer1;
		}else{
			return answer1;
		}
	}
	@Override
	public String fullCellText() {
		return super.fullCellText();
	}
	
	}
	