package textExcel;

public class FormulaCell extends RealCell implements Cell {
	
	private Spreadsheet spread;
	
	public FormulaCell(String formula) {
		super(formula);
	}
	
	public FormulaCell(String formula, Spreadsheet spread, Cell [][] test) {
		super(formula);
		this.spread = spread;
	}
	
	@Override
	public String abbreviatedCellText() {
		return super.abbreviatedCellText();
	}
	
	public String fullCellText() {
		return super.fullCellText();
	}
	
	@Override
	public double getDoubleValue() {
		String formula = fullCellText().substring(2, fullCellText().length() - 2);
		String[] formulaDiv = formula.split(" ");
		double result;
		if (formulaDiv[0].toLowerCase().equals("sum")) {
			return sum(formulaDiv[1]);
		} else if (formulaDiv[0].toLowerCase().equals("avg")) {
			return avg(formulaDiv[1]);
		}
		if (formulaDiv[0].length() < 4 && formulaDiv[0].substring(0,1).matches("[a-zA-Z]+")) {
			SpreadsheetLocation gridLoc = new SpreadsheetLocation(formulaDiv[0]);
			result = ((RealCell) spread.getCell(gridLoc)).getDoubleValue();
		} else {
			result = Double.parseDouble(formulaDiv[0]);
		}
		for (int i = 2; i < formulaDiv.length; i+=2) {
			if (formulaDiv[i].length() < 4 && formulaDiv[i].substring(0,1).matches("[a-zA-Z]+")) {
				SpreadsheetLocation gridLoc = new SpreadsheetLocation(formulaDiv[i]);
				if (formulaDiv[i - 1].equals("+")) {
					result += ((RealCell) spread.getCell(gridLoc)).getDoubleValue();
				} else if (formulaDiv[i - 1].equals("-")) {
					result -= ((RealCell) spread.getCell(gridLoc)).getDoubleValue();
				} else if (formulaDiv[i - 1].equals("/")) {
					result /= ((RealCell) spread.getCell(gridLoc)).getDoubleValue();
				} else if (formulaDiv[i - 1].equals("*")) {
					result *= ((RealCell) spread.getCell(gridLoc)).getDoubleValue();
				} else {
					throw new IllegalArgumentException("Please enter a valid operator");
				}
			} else {
				if (formulaDiv[i - 1].equals("+")) {
					result += Double.parseDouble(formulaDiv[i]);
				} else if (formulaDiv[i - 1].equals("-")) {
					result -= Double.parseDouble(formulaDiv[i]);
				} else if (formulaDiv[i - 1].equals("/")) {
					result /= Double.parseDouble(formulaDiv[i]);
				} else if (formulaDiv[i - 1].equals("*")) {
					result *= Double.parseDouble(formulaDiv[i]);
				} else {
					throw new IllegalArgumentException("Please enter a valid operator");
				}
			}
		}
		return result;
	}
	
	public double sum(String range) {
		String[] cells = range.split("-");
		char outer1 = (cells[0].toLowerCase()).charAt(0);
		char outer2 = (cells[1].toLowerCase()).charAt(0);
		int inner1 = Integer.parseInt(cells[0].substring(1));
		int inner2 = Integer.parseInt(cells[1].substring(1));
		double sum = 0;
		for (char i = outer1; i <= outer2; i++) {
			for (int j = inner1; j <= inner2; j++) {
				SpreadsheetLocation gridLoc = new SpreadsheetLocation(i + "" + j);
				sum += ((RealCell) spread.getCell(gridLoc)).getDoubleValue();
			}
		}
		return sum;
	}
	
	public double avg(String range) {
		String[] cells = range.split("-");
		char outer1 = (cells[0].toLowerCase()).charAt(0);
		char outer2 = (cells[1].toLowerCase()).charAt(0);
		int inner1 = Integer.parseInt(cells[0].substring(1));
		int inner2 = Integer.parseInt(cells[1].substring(1));
		double sum = 0;
		int divisor = 0;
		for (char i = outer1; i <= outer2; i++) {
			for (int j = inner1; j <= inner2; j++) {
				SpreadsheetLocation gridLoc = new SpreadsheetLocation(i + "" + j);
				sum += ((RealCell) spread.getCell(gridLoc)).getDoubleValue();
				divisor++;
			}
		}
		return sum / divisor;
	}
}